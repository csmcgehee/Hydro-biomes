title: "UNITE_database_analysis_Cora"
author: "Cora"
date: "May 28, 2020, updated 8 March 2022"
output:
  html_document:
  df_print: paged

``{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)

``{r install packages}

install.packages("ape",repos="https://cloud.r-project.org",quiet=TRUE)

if (!requireNamespace("BiocManager", quietly = TRUE))
  install.packages("BiocManager")

BiocManager::install("dada2")

if (!requireNamespace("BiocManager", quietly = TRUE))
  install.packages("BiocManager")

BiocManager::install("ShortRead")

if (!requireNamespace("BiocManager", quietly = TRUE))
  install.packages("BiocManager")

BiocManager::install("Biostrings")

if (!requireNamespace("BiocManager", quietly = TRUE))
  install.packages("BiocManager")

BiocManager::install("phyloseq")

# Install
install.packages("wesanderson")
# Load

if (!requireNamespace("BiocManager", quietly = TRUE))
  install.packages("BiocManager")

BiocManager::install("DESeq2")

devtools::install_github("karthik/wesanderson")

##
```

```{r load packages}
library(dada2)
library(ShortRead)
library(Biostrings)
library(phyloseq)
library(ggplot2)
library(cowplot)
library(wesanderson)
library(DESeq2)
library(vegan)
library(tidyr)
packageVersion("cowplot")
packageVersion("ape")
packageVersion("vegan")

library(stringr)
library(plyr)
library(reshape2)
library(doBy)
library(microbiome)
library(ggpubr)
library(corrplot)
library(Hmisc)
library(igraph)
library(DAtest)


```
####DADA2 1.8 ITS pipeline###

{r import data}
path <- "C:/Users/csm15105work/Desktop/mapleITS"
list.files(path)
fnFs <- sort(list.files(path, pattern = "_R1_001.fastq", full.names = TRUE))
fnRs <- sort(list.files(path, pattern = "_R2_001.fastq", full.names = TRUE))

FWD <- "ACACTCTTTCCCTACACGACGCTCTTCCGATCT"
REV <- "GTGACTGGAGTTCAGACGTGTGCTCTTCCGATCT"

allOrients <- function(primer) {
  #create all orientations of the input sequence
  require(Biostrings)
  dna <- DNAString(primer) #the biostrings works with DNAstring objects rather than character vectors
  orients <- c(Forward =dna, Complement =complement(dna), Reverse= reverse(dna), RevComp= reverseComplement(dna))
  return(sapply(orients, toString)) }
FWD.orients <- allOrients(FWD)
REV.orients <- allOrients(REV)
FWD.orients
```

{r filter and trim reads}
fnFs.filtN <- file.path(path, "filtN", basename(fnFs))
fnRs.filtN <- file.path(path, "filtN", basename(fnRs))
filterAndTrim(fnFs, fnFs.filtN, fnRs, fnRs.filtN, maxN=0, multithread = FALSE)

primerHits <- function(primer, fn) {
  nhits <- vcountPattern(primer, sread(readFastq(fn)), fixed = FALSE)
  return(sum(nhits > 0))
}

rbind(FWD.ForwardReads = sapply(FWD.orients, primerHits, fn = fnFs.filtN[[1]]),
      FWD.ReverseReads = sapply(FWD.orients, primerHits, fn = fnRs.filtN[[1]]),
      REV.FowardReads = sapply(REV.orients, primerHits, fn = fnFs.filtN[[1]]),
      REV.ReverseReads = sapply(REV.orients, primerHits, fn = fnRs.filtN[[1]]))

cutadapt <- "C:/Users/csm15105work/Desktop/mapleITS/cutadapt1"
system2(cutadapt, args ="--version")

path.cut <- file.path(path, "cutadapt1")
if(!dir.exists(path.cut)) dir.create(path.cut)
fnFs.cut <- file.path(path.cut, basename(fnFs))
fnRs.cut <- file.path(path.cut, basename(fnRs))

FWD.RC <-dada2:::rc(FWD)
REV.RC <-dada2:::rc(REV)
#trim FWD and the reverse-complement of REV off of R1 (forward reads)##
R1.flags <- paste("-g", FWD, "-a", REV.RC)
#trim REV and the reverse-complement of FWD off of R2 (reverse reads)#
R2.flags <- paste("-G", REV, "-A", FWD.RC)
#Run cutadapt#
for(i in seq_along(fnFs)) {
  system2(cutadapt, args = c(R1.flags, R2.flags, "-n", 2, # -n 2 required to remove FWD and REV from reads
                             "-o", fnFs.cut[i], "-p", fnRs.cut[i], # output files
                             fnFs.filtN[i], fnRs.filtN[i])) # input files
}

getwd()
setwd("C:/Users/csm15105work/Desktop/mapleITS/cutadapt1")

print(fnFs)
print(fnRs)


rbind(FWD.ForwardReads = sapply(FWD.orients, primerHits, fn = fnFs.cut[[1]]), 
      FWD.ReverseReads = sapply(FWD.orients, primerHits, fn = fnRs.cut[[1]]), 
      REV.ForwardReads = sapply(REV.orients, primerHits, fn = fnFs.cut[[1]]), 
      REV.ReverseReads = sapply(REV.orients, primerHits, fn = fnRs.cut[[1]]))

cutFs <- sort(list.files(path.cut, pattern = "_R1_001.fastq", full.names = TRUE))
cutRs <- sort(list.files(path.cut, pattern = "_R2_001.fastq", full.names = TRUE))

#extract sample names, assuming filenames have format:
get.sample.name <-function(fname) strsplit(basename(fname), "_")[[1]][1]
sample.names <- unname(sapply(cutFs, get.sample.name))
head(sample.names)

plotQualityProfile(cutFs[1:2])
plotQualityProfile(cutRs[1:2])

filtFs <- file.path(path.cut, "filtered", basename(cutFs))
filtRs <- file.path(path.cut, "filtered", basename(cutRs))

out<- filterAndTrim(cutFs, filtFs, cutRs, filtRs, maxN =0, maxEE =c(2,2), truncQ = 2, minLen = 50, rm.phix = TRUE, compress=TRUE, multithread = FALSE) 
head(out)
out
```

{r check quality}
errF <- learnErrors(filtFs, multithread = TRUE)
errR <- learnErrors(filtRs, multithread = TRUE)

plotErrors(errF, nominalQ = TRUE)
```

```{r denoise}
derepFs <- derepFastq(filtFs, verbose = TRUE)
derepRs <- derepFastq(filtRs, verbose = TRUE)
#Name the derep class objects by the sample names#
names(derepFs) <- sample.names
names(derepRs) <- sample.names

dadaFs <- dada(derepFs, err = errF, multithread = TRUE)
dadaRs <- dada(derepRs, err = errR, multithread = TRUE)

mergers <- mergePairs(dadaFs, derepFs, dadaRs, derepRs, verbose=TRUE)

seqtab <- makeSequenceTable(mergers)
dim(seqtab)

seqtab.nochim <- removeBimeraDenovo(seqtab, method ="consensus", multithread=TRUE, verbose=TRUE)
table(nchar(getSequences(seqtab.nochim)))

getN <- function(x) sum(getUniques(x))
track <- cbind(out, sapply(dadaFs, getN), sapply(dadaRs, getN), sapply(mergers, 
                                                                       getN), rowSums(seqtab.nochim))
# If processing a single sample, remove the sapply calls: e.g. replace
# sapply(dadaFs, getN) with getN(dadaFs)
colnames(track) <- c("input", "filtered", "denoisedF", "denoisedR", "merged", 
                     "nonchim")
rownames(track) <- sample.names
head(track)
track

```
{r assign taxa}


seqtab.nochim
write.csv(seqtab.nochim, "C:/Users/csmcg/OneDrive/Desktop/countseq.csv")

####Alternative####


setwd("C:/Users/csmcg/Downloads/mapleITS")

seqtab.nochim_its <- read.csv("countseq_its.csv", row.names = 1)
seqtab.nochim_its <- as.matrix(seqtab.nochim_its)



unite.ref <- "C:/Users/csm15105work/Desktop/mapleITS/cutadapt1/sh_general_release_dynamic_all"
taxa <- assignTaxonomy(seqtab.nochim, unite.ref, multithread = TRUE, tryRC = TRUE)

unite.ref


taxa.print <- taxa  # Removing sequence rownames for display only
rownames(taxa.print) <- NULL
head(taxa.print)

save(taxa, file = "taxa.RData")
save(taxa.print, file = "taxa.print.RData")

## us this to load the RData files I genereated with the unite annotations
load("taxa.RData")
load("taxa.print.RData")
```

In the terminal window:
  sed -i '/^$/d' oomycete_database.txt

Or in atom: cmd+f or ctrl+f to open find and replace; turn on regex .*; find: ^$ and leave replace empty
In regex, ^ means beginning of the line and $ means end of the line, so you are saying 'remove all empty lines'
Other find and replace:
  ' subsp\. ' '_subsp_'
' sp\. ' '_sp_'



{r dy custom db test}


#### custom database
custom_db <- "oomycete_database.txt"
taxa <- assignSpecies(seqtab.nochim_its, custom_db, tryRC = TRUE, allowMultiple = TRUE)

taxa.print <- taxa  # Removing sequence rownames for display only
rownames(taxa.print) <- NULL
head(taxa.print)

### testing against positive
seqtab.nochim_its <- read.csv("test.csv", row.names = 1)
seqtab.nochim_its <- as.matrix(seqtab.nochim)
taxa <- assignSpecies(seqtab.nochim_its, custom_db, tryRC = TRUE, allowMultiple = TRUE)

taxa.print <- taxa  # Removing sequence rownames for display only
rownames(taxa.print) <- NULL
head(taxa.print)
```

```{r rename asvs}
asv_seqs <- colnames(seqtab.nochim_its)
asv_headers <- vector(dim(seqtab.nochim_its)[2], mode="character")

for (i in 1:dim(seqtab.nochim)[2]) {
  asv_headers[i] <- paste(">ASV", i, sep="_")
}

# making and writing out a fasta of our final ASV seqs:
asv_fasta <- c(rbind(asv_headers, asv_seqs))
write(asv_fasta, "ASVs.fa")

# count table:
asv_tab <- t(seqtab.nochim)
row.names(asv_tab) <- sub(">", "", asv_headers)
# write.table(asv_tab, "ASVs_counts2.tsv", sep="\t", quote=F, col.names=NA)

# tax table:
asv_tax <- taxa
row.names(asv_tax) <- sub(">", "", asv_headers)
# write.table(asv_tax, "ASVs_taxonomy.tsv", sep="\t", quote=F, col.names=NA)
```

```{r make phyloseq object} ##Metadata##
samples.out_its <- rownames(seqtab.nochim_its)
samples_its <- c("CleanFoam120191114", "CleanFoam220191114", "CleanFoam320191114",
                 "LettuceRoots2320191114", "LettuceRoots320191114", "LettuceRoots920191114", 
                 "MatureFoam120191114", "MatureFoam220191114", "MatureFoam320191114", 
                 "Municipal120191114", 
                 "PostharvestTray120191114", "PostharvestTray220191114", "PostharvestTray320191114", 
                 "SeedlingTray120191114", "SeedlingTray220191114", "SeedlingTray320191114", 
                 "SowStation120191114", "SowStation220191114", "SowStation320191114", "TrayTransplant120191114", "TrayTransplant220191114",
                 "Trough1120191114", "Trough320191114", "Trough920191114", 
                 "TroughLiner120191114", "TroughLiner220191114", "TroughLiner320191114")
 
site <- c("Post-sanitation surface", "Post-sanitation surface", "Post-sanitation surface",
          "Seedling root", "Transplant root", "Mature root",
          "Mature surface", "Mature surface", "Mature surface",
          "Municipal water",
          "Harvest surface", "Harvest surface", "Harvest surface", 
          "Seedling surface", "Seedling surface", "Seedling surface", 
          "Sowing surface", "Sowing surface", "Sowing surface", 
          "Transplant surface", "Transplant surface",
          "Nutrient solution", "Nutrient solution", "Nutrient solution", 
          "Liner surface", "Liner surface", "Liner surface")
treatment <- c("Surface", "Surface", "Surface",
               "Root", "Root", "Root", 
               "Surface", "Surface", "Surface", 
               "Solution", 
               "Surface", "Surface", "Surface", 
               "Surface", "Surface", "Surface", 
               "Surface", "Surface", "Surface",
               "Surface", "Surface",
               "Solution", "Solution", "Solution", 
               "Surface", "Surface", "Surface")
Stage <- c("Late", "Late", "Late",
          "Early", "Early", "Late",
          "Late", "Late", "Late",
          "Early",
          "Late", "Late", "Late", 
          "Early", "Early", "Early", 
          "Early", "Early", "Early", 
          "Early", "Early",
          "Late", "Late", "Late", 
          "Late", "Late", "Late")
               

samdf_its <- data.frame(merge=samples_its, Production.Stage=site, treatment=treatment, stage=Stage)
# write.table(samdf_its, "samdf_its.txt", quote = FALSE, row.names = FALSE)
rownames(samdf_its) <- samples.out_its

ps_its <- phyloseq(otu_table(seqtab.nochim_its, taxa_are_rows=FALSE), 
                   sample_data(samdf_its), 
                   tax_table(taxa))

sample_names()
                   
ps_its <- prune_samples(sample_names(ps_its) != "Mock", ps_its) # Remove mock sample
ps_its
``

##Alpha diversity stats####
# Install
install.packages("wesanderson")
library(FSA)
library(readxl)
library(ggplot2)
library(wesanderson)
library(dplyr)


write.csv(seqtab.nochim, "C:/Users/csmcg/OneDrive/Desktop/countseq.csv")


##Alpha diversity measures, stats for NS##
setwd("C:/Users/csm15105work.UCONN/Desktop/NS_qPCR")
my_data_alp_ns_all <- read_excel("Shannon_Simpson_NS_var.xlsx", sheet=1)

kruskal.test(Simpson ~ Cycle, data = my_data_alp_ns_all)
kruskal.test(Simpson ~ Solution, data = my_data_alp_ns_all)
kruskal.test(Simpson ~ Pathogen, data = my_data_alp_ns_all)

interAB<-interaction(my_data_alp_ns_all$Cycle, my_data_alp_ns_all$Solution)
kruskal.test(Simpson ~ interAB, data = my_data_alp_ns_all)

interAB<-interaction(my_data_alp_ns_all$Cycle, my_data_alp_ns_all$Pathogen)
kruskal.test(Simpson ~ interAB, data = my_data_alp_ns_all)

interAB<-interaction(my_data_alp_ns_all$Solution, my_data_alp_ns_all$Pathogen)
kruskal.test(Simpson ~ interAB, data = my_data_alp_ns_all)

interABC<-interaction(my_data_alp_ns_all$Cycle, my_data_alp_ns_all$Solution, my_data_alp_ns_all$Pathogen)
kruskal.test(Simpson ~ interABC, data = my_data_alp_ns_all)

##Alpha diversity measures for nutrient solution##
setwd("C:/Users/csm15105work.UCONN/Desktop/NS_qPCR")
my_data_alp_ns <- read_excel("Shannon_Simpson_NS_dunn.xlsx", sheet=1)

library(DescTools)
dunnTest(Simpson~Treatment, my_data_alp_ns)
         
kk<-kruskal(my_data_alp_ns$Simpson,my_data_alp_ns$Treatment, group=TRUE,p.adj="holm")
kk

library(agricolae)
kruskal(my_data_rno$Rootnecrosis, my_data_rno$Solution, my_data_rno$Cycle, group=TRUE, p.adj="holm")$groups

##By variable##
my_data_alp_ns_all <- read_excel("Shannon_Simpson_NS_dunn.xlsx", sheet=1)

kruskal.test(Rootnecrosis ~ Cycle, data = my_data_alp_ns_all)
kruskal.test(Rootnecrosis ~ Solution, data = my_data_alp_ns_all)
kruskal.test(Rootnecrosis ~ Pathogen, data = my_data_alp_ns_all)

interAB<-interaction(my_data_alp_ns_all$Cycle, my_data_alp_ns_all$Solution, my_data_alp_ns_all$Pathogen)

kruskal.test(Rootnecrosis ~ interABC, data = my_data_rn)





##Alpha diversity plots##

melted_its <- psmelt(ps_its)

plot_richness(ps_its, x="treatment", measures=c("Shannon", "Simpson"), color="Production.Stage") + geom_point(size=3.5)
plot_richness(ps_its, x="site", measures=c("Shannon", "Simpson", "Observed"), color="site") + geom_point(size=5)
plot_richness(ps_its, x="site", measures=c("Shannon", "Simpson", "Observed"), shape ="site" + geom_point(size=7))


newSTorder =  c("Sowing surface", "Seedling surface", "Transplant surface", "Mature surface", "Liner surface", "Harvest surface", "Post-sanitation surface", "Municipal water", "Nutrient solution", "Seedling root", "Transplant root", "Mature root")

newSTorder2 =  c("Surface", "Solution", "Root")

p$data$treatment <- as.character(p$data$treatment)
p$data$treatment <- factor(p$data$treatment, levels=newSTorder2)

p$data$Production.Stage <- as.character(p$data$Production.Stage)
p$data$Production.Stage <- factor(p$data$Production.Stage, levels=newSTorder)

p              

##Group by type of sample##USE THIS ONE###
p <- plot_richness(ps_its, x=("treatment"), measures=c("Shannon", "Simpson"), color = "Production.Stage") + geom_point(size=5) + theme_bw()+
  scale_shape_manual(values=c(1, 2)) +  theme(axis.text.x = element_text(size  = 11, angle = 45, hjust = 1, vjust = 1)) +
  theme(axis.text.y = element_text(size  = 11)) + theme(strip.text=element_text(size=11)) +
  xlab("") +
  theme(panel.grid.major.y = element_blank(), panel.grid.minor.y = element_blank()) +
  theme(legend.title=element_blank()) +
  scale_color_manual (values = my.colors12) +
  theme(strip.text.x = element_text(size = 11)) + theme(legend.text = element_text(size = 11))


my.colors12<- colorRampPalette (c('pink2', 'red3','orange2', 'purple3', '#117733', 'yellow3', '#661100', '#ABDDDE', 'darkblue', 'cornsilk3', 'grey45', 'gray1'))(12)

my.colors4 <- colorRampPalette (c('#ECCBAE', 'burlywood3','#D69C4E', '#9C964A', 'tan4', '#81A88D', '#046C9A', '#ABDDDE', 'darkblue', '#446455', 'grey30', 'gray1'))(12)
  


##Group by type of sample##
plot_richness(ps_its, x=("treatment"), measures=c("Shannon", "Simpson"), color = "Production.Stage") + geom_point(size=5) +
  scale_shape_manual(values=c(1, 2)) +  theme(axis.text.x = element_text(size  = 11, angle = 45, hjust = 1, vjust = 1)) + 
  theme(axis.text.y = element_text(size  = 11)) + theme(strip.text=element_text(size=11)) +
  xlab("") +
  theme(panel.grid.major.y = element_blank(), panel.grid.minor.y = element_blank()) +
  theme(legend.title=element_blank()) +
  scale_color_manual(values = wes_palette("Darjeeling2", n = 12, type = "continuous"))+
  theme(strip.text.x = element_text(size = 11)) + theme(legend.text = element_text(size = 11))
  
###By early or late in production###
plot_richness(ps_its, x=("treatment"), measures=c("Shannon", "Simpson"), color = "Production.Stage", shape = "stage") + geom_point(size=5) +
  scale_shape_manual(values=c(1, 2)) +  theme(axis.text.x = element_text(size  = 11, angle = 45, hjust = 1, vjust = 1)) +
  theme(axis.text.y = element_text(size  = 11)) + theme(strip.text=element_text(size=11)) +
  xlab("") +
  theme(panel.grid.major.y = element_blank(), panel.grid.minor.y = element_blank()) +
  theme(legend.title=element_blank()) +
  scale_color_manual(values = wes_palette("Darjeeling2", n = 13, type = "continuous"))+
  theme(strip.text.x = element_text(size = 11)) + theme(legend.text = element_text(size = 11))
  
###X-AXIS By early or late in production###
plot_richness(ps_its, x=("stage"), measures=c("Shannon", "Simpson"), color = "Production.Stage", shape = "treatment") + geom_point(size=5) +
  scale_shape_manual(values=c(1, 2, 3)) +  theme(axis.text.x = element_text(size  = 11, angle = 45, hjust = 1, vjust = 1)) +
  theme(axis.text.y = element_text(size  = 11)) + theme(strip.text=element_text(size=11)) +
  xlab("") +
  theme(panel.grid.major.y = element_blank(), panel.grid.minor.y = element_blank()) +
  theme(legend.title=element_blank()) +
  scale_color_manual(values = wes_palette("Darjeeling2", n = 13, type = "continuous"))+
  theme(strip.text.x = element_text(size = 11)) + theme(legend.text = element_text(size = 11))
  
  
###Box Plot#####

library(reshape)

est_rich <- estimate_richness(ps_its,  measures=c("Shannon", "Simpson"))
est_rich$merge <- rownames(est_rich)
samdf_its$merge <- rownames(samdf_its)
est_rich <- merge(est_rich, samdf_its, by = "merge")
est_rich <- melt(est_rich)
  
  ggplot(est_rich, aes(x = treatment, y = value, color = Production.Stage)) +
  geom_boxplot(size = 1) +
  scale_shape_manual(values=c(1, 2, 3)) +
  xlab("") + ylab("Alpha Diversity Measure") +
  theme(panel.grid.major.y = element_blank(), panel.grid.minor.y = element_blank()) +
  theme(legend.title=element_blank()) +
  scale_color_manual(values = wes_palette("Darjeeling2", n = 13, type = "continuous")) +
  theme(axis.text.x = element_text(size  = 9, angle = 90, hjust = 1, vjust = 0.5))
  
  
###Early or Late production stage####
 ggplot(est_rich, aes(x = stage, y = value, color = Production.Stage)) +
  geom_boxplot(size = 2) +
  scale_shape_manual(values=c(1, 2)) +
  xlab("") + ylab("Alpha Diversity Measure") +
  theme(panel.grid.major.y = element_blank(), panel.grid.minor.y = element_blank()) +
  theme(legend.title=element_blank()) +
  scale_color_manual(values = wes_palette("Darjeeling2", n = 13, type = "continuous")) +
  theme(axis.text.x = element_text(size  = 9, angle = 90, hjust = 1, vjust = 0.5))
  
##Boxplot with outlier shape options###
ggplot(est_rich, aes(x = treatment, y = value, color = Production.Stage)) +
  geom_boxplot(size = 1, outlier.colour="maroon", outlier.shape=8,
                outlier.size=2) +
  scale_shape_manual(values=c(1, 2, 3)) +
  xlab("") + ylab("Alpha Diversity Measure") +
  theme(panel.grid.major.y = element_blank(), panel.grid.minor.y = element_blank()) +
  theme(legend.title=element_blank()) +
  scale_color_manual(values = wes_palette("Darjeeling2", n = 13, type = "continuous")) +
  theme(axis.text.x = element_text(size  = 9, angle = 90, hjust = 1, vjust = 0.5))
  
#####Outlier shape number code####
  Shape=8 is star
  Shape=2 is triangle
  Shape=1 is open circles
  Shape=3 is plus sign
  Shape=4 is X
  Shape=5 is fan-shaped (messy looking)
  Shape=6 is upside down triangle
  Shape=7 is square with an X in them
  Shape=9 is triangle with an X
  Shape=10 is circle with an X
  Shape=11 is a star (looks like star of david)
  Shape=12 is a square with an X
  Shape=13 is an open circle with a larger X
  
####End of shape number code#####


estimate_richness(ps_its, x="treatment", measures=c("Shannon", "Simpson"), color = "Production.Stage") + geom_point(size=2) +
  scale_shape_manual(values=c(1, 2)) +  theme(axis.text.x = element_text(size  = 11, angle = 45, hjust = 1, vjust = 1)) + 
  theme(axis.text.y = element_text(size  = 11)) + theme(strip.text=element_text(size=11)) +
  xlab("") +
  theme(panel.grid.major.y = element_blank(), panel.grid.minor.y = element_blank()) +
  theme(legend.title=element_blank()) +
  scale_color_manual(values = wes_palette("Darjeeling2", n = 10, type = "continuous"))+
  theme(strip.text.x = element_text(size = 11)) + theme(legend.text = element_text(size = 11))
  


library(reshape) 
reshape::melt()


##BOXPLOT TO USE####
  
  ##***Alpha diversity, Shannon***##
est_rich <- estimate_richness(ps_its,  measures=c("Shannon"))
est_rich$merge <- rownames(est_rich)
samdf_its$merge <- rownames(samdf_its)
est_rich <- merge(est_rich, samdf_its, by = "merge")
est_rich <- melt(est_rich)

library(reshape) 
reshape::melt(est_rich)

write.csv(est_rich, "C:/Users/csmcg/OneDrive/Desktop/Shannon_its.csv")


##Boxplot with outlier##
ggplot(est_rich, aes(x = treatment, y = value, color = site)) +
  geom_boxplot(size = 1, outlier.colour="red", outlier.shape=8,
                outlier.size=4) + geom_jitter(shape=16, position=position_jitter(0.2)) +
  scale_shape_manual(values=c(1, 2, 3)) +
  xlab("") + ylab("Shannon Alpha Diversity Measure") +
  theme(panel.grid.major.y = element_blank(), panel.grid.minor.y = element_blank()) +
  theme(legend.title=element_blank()) +
  scale_color_manual(values = wes_palette("Darjeeling2", n = 5, type = "continuous")) +
  theme(axis.text.x = element_text(size  = 12, angle = 90, hjust = 1, vjust = 0.5))

##Boxplot without outlier##
ggplot(est_rich, aes(x = treatment, y = value, color = site)) +
  geom_boxplot(size = 1) + geom_jitter(shape=16, position=position_jitter(0.2)) +
  scale_shape_manual(values=c(1, 2, 3)) +
  xlab("") + ylab("Shannon Alpha Diversity Measure") +
  theme(panel.grid.major.y = element_blank(), panel.grid.minor.y = element_blank()) +
  theme(legend.title=element_blank()) +
  scale_color_manual(values = wes_palette("Darjeeling2", n = 12, type = "continuous")) +
  theme(axis.text.x = element_text(size  = 12, angle = 90, hjust = 1, vjust = 0.5))



 ##***Alpha diversity, Simpson***##
est_rich <- estimate_richness(ps_its,  measures=c("Simpson"))
est_rich$merge <- rownames(est_rich)
samdf_its$merge <- rownames(samdf_its)
est_rich <- merge(est_rich, samdf_its, by = "merge")
est_rich <- melt(est_rich)

library(reshape) 
reshape::melt(est_rich)

write.csv(est_rich, "C:/Users/csmcg/OneDrive/Desktop/Simpson_its.csv")

ggplot(est_rich, aes(x = treatment, y = value, color = site)) +
  geom_boxplot(size = 1, outlier.colour="red", outlier.shape=8,
                outlier.size=4) + geom_jitter(shape=16, position=position_jitter(0.2)) +
  scale_shape_manual(values=c(1, 2, 3)) +
  xlab("") + ylab("Alpha Diversity Measure") +
  theme(panel.grid.major.y = element_blank(), panel.grid.minor.y = element_blank()) +
  theme(legend.title=element_blank()) +
  scale_color_manual(values = wes_palette("Darjeeling2", n = 12, type = "continuous")) +
  theme(axis.text.x = element_text(size  = 12, angle = 90, hjust = 1, vjust = 0.5))



ggplot(est_rich, aes(x = treatment, y = value, color = site)) +
  geom_boxplot(size = 1) + geom_jitter(shape=16, position=position_jitter(0.2)) +
  scale_shape_manual(values=c(1, 2, 3)) +
  xlab("") + ylab("Simpson Alpha Diversity Measure") +
  theme(panel.grid.major.y = element_blank(), panel.grid.minor.y = element_blank()) +
  theme(legend.title=element_blank()) +
  scale_color_manual(values = wes_palette("Darjeeling2", n = 12, type = "continuous")) +
  theme(axis.text.x = element_text(size  = 12, angle = 90, hjust = 1, vjust = 0.5))
  
  
  
  ggplot(est_rich, aes(x = Treatment, y = value, color = Cycle)) +
  geom_boxplot(size = 1) + geom_jitter(shape=16, position=position_jitter(0.2)) +
  scale_shape_manual(values=c(1, 2, 3)) +
  xlab("") + ylab("Alpha Diversity Measure") +
  theme(panel.grid.major.y = element_blank(), panel.grid.minor.y = element_blank()) +
  theme(legend.title=element_blank()) +
  scale_color_manual(values = wes_palette("Cavalcanti1", n = 7, type = "continuous")) +
  theme(axis.text.x = element_text(size  = 12, angle = 90, hjust = 1, vjust = 0.5))


          
##Save file#
#ggsave("plots/oomycete_alpha_diversity_site.pdf", dpi = 600)

Sys.time()
Sys.Date()

##Genus## ##BarPlot##

melted_its <- psmelt(ps_its)

## housekeeping - repeat for each taxa level
# melted_nc$Genus <- gsub('g__', '', melted_nc$Genus)

#facet for multiple treatments##
# facet_grid(. ~ site)

##Top5 Genus##
melted_its$Genus <- gsub('g__', '', melted_its$Genus)
genus_counts <- aggregate(melted_its$Abundance, by=list(Category=melted_its$Genus), FUN=sum)
gc_reorder <- genus_counts[order(-genus_counts$x),]
top5_genus <- NULL
top5_genus$Genus <- head(gc_reorder$Category, 5)
top5_melted <- subset(melted_its, Genus %in% top5_genus$Genus)


ggplot(top5_melted, aes(x = treatment, y = Abundance, fill = Genus)) + 
  geom_bar(stat = "identity", position = "fill") +
  # theme(legend.position = "none") +
  scale_y_continuous(labels = function(x) format(x, scientific = TRUE)) +
  theme(axis.text.x = element_text(size  = 12, angle = 45, hjust = 1, vjust = 1)) +
  xlab("")+ ylab("Relative abundance") +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
  scale_fill_manual(values = wes_palette("FantasticFox1", n = 10, type = "continuous")) +
  scale_y_continuous(labels = scales::percent_format()) +
  theme(strip.text.x = element_text(size = 12)) + theme(legend.text = element_text(size = 12))+ facet_grid(. ~ Source)

##TOP 18, all genus##
melted_its$Genus <- gsub('g__', '', melted_its$Genus)
genus_counts <- aggregate(melted_its$Abundance, by=list(Category=melted_its$Genus), FUN=sum)
gc_reorder <- genus_counts[order(-genus_counts$x),]
top18_genus <- NULL
top18_genus$Genus <- head(gc_reorder$Category, 18)
top18_melted <- subset(melted_its, Genus %in% top18_genus$Genus)


##Remove Lactuca genus and NA###
ggplot(subset(top18_melted, Genus != "Lactuca"), aes(x = Production.Stage, y = Abundance, fill = Genus), subset = !(Genus == 'NA')) + 
  geom_bar(stat = "identity", position = "fill") +
  # theme(legend.position = "none") +
  scale_y_continuous(labels = function(x) format(x, scientific = TRUE)) +
  theme(axis.text.x = element_text(size  = 11, angle = 45, hjust = 1, vjust = 1)) +
  xlab("")+ ylab("Relative abundance") +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
  scale_fill_manual(values = wes_palette("Darjeeling2", n = 17, type = "continuous")) +
  scale_y_continuous(labels = scales::percent_format()) +
  theme(strip.text.x = element_text(size = 11)) + theme(legend.text = element_text(size = 11))


ggplot(top18_melted, aes(x = treatment, y = Abundance, fill = Genus)) + 
  geom_bar(stat = "identity", position = "fill") +
  # theme(legend.position = "none") +
  scale_y_continuous(labels = function(x) format(x, scientific = TRUE)) +
  theme(axis.text.x = element_text(size  = 11, angle = 45, hjust = 1, vjust = 1)) +
  xlab("")+ ylab("Relative abundance") +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
  scale_fill_manual(values = wes_palette("FantasticFox1", n = 17, type = "continuous")) +
  scale_y_continuous(labels = scales::percent_format()) +
  theme(strip.text.x = element_text(size = 11)) + theme(legend.text = element_text(size = 11)) + facet_grid(. ~ Source)
  
  
  ggplot(top18_melted, aes(x = treatment, y = Abundance, fill = Genus)) + 
  geom_bar(stat = "identity", position = "fill") +
  # theme(legend.position = "none") +
  scale_y_continuous(labels = function(x) format(x, scientific = TRUE)) +
  theme(axis.text.x = element_text(size  = 11, angle = 45, hjust = 1, vjust = 1)) +
  xlab("")+ ylab("Relative abundance") +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
  scale_fill_manual(values = wes_palette("Darjeeling2", n = 17, type = "continuous")) +
  scale_y_continuous(labels = scales::percent_format()) +
  theme(strip.text.x = element_text(size = 11)) + theme(legend.text = element_text(size = 11))



##Save plots##
#ggsave("plots/fungi_top10_heatshock_by_part_relabun.tiff", dpi = 300)

##Species## ##Bar Plot##
melted_its <- psmelt(ps_its)

melted_its$Species <- gsub('s__', '', melted_its$Species)
##Top10 Species##
species_counts <- aggregate(melted_its$Abundance, by=list(Category=melted_its$Species), FUN=sum)
sp_reorder <- species_counts[order(-species_counts$x),]
top10_species <- NULL
top10_species$Species <- head(sp_reorder$Category, 10)
top10_melted <- subset(melted_its, Species %in% top10_species$Species)


ggplot(top10_melted, aes(x = Production.Stage, y = Abundance, fill = Species)) + 
  geom_bar(stat = "identity", position = "fill") +
  # theme(legend.position = "none") +
  scale_y_continuous(labels = function(x) format(x, scientific = TRUE)) +
  theme(axis.text.x = element_text(size  = 12, angle = 45, hjust = 1, vjust = 1)) +
  xlab("")+ ylab("Relative abundance") +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
  scale_fill_manual(values = wes_palette("Darjeeling2", n = 10, type = "continuous")) +
  scale_y_continuous(labels = scales::percent_format()) +
  theme(strip.text.x = element_text(size = 12)) + theme(legend.text = element_text(size = 12))


#How to remove OTU lines, black ugly lines!
plot_bar(melted_its, x="site", fill="Genus") + geom_bar(aes(color=Genus, fill=Genus), stat="identity", position="stack")


#####Ordination code with Euclidian distance####
####April 6, 2022#####


ps_its <- phyloseq(otu_table(seqtab.nochim, taxa_are_rows=FALSE), 
                   sample_data(samdf_its), 
                   tax_table(taxa))
ps_its

---
title: "Cora's ordination plots"
author: "Artemis S. Louyakis"
date: 2022.04.08
output: html_notebook
---

```{r load packages}
library(phyloseq)
library(ggplot2)
library(DESeq2)
library(vegan)
library(wesanderson)
library(dendextend)
library(ggrepel)
```


```{r coras environment}
load("~/Downloads/R environment_ITS_maplelane_7April22.rdata")
```


## sent via linkedin from Dyanna - modified in line

ps.prop_its <- transform_sample_counts(ps_its, function(otu) otu/sum(otu))
ord.nmds.bray_its <- ordinate(ps.prop_its, method="NMDS", distance="bray")
ord.pcoa.bray_its <- ordinate(ps.prop_its, method="PCoA", distance="bray")

pcoa_df <- as.data.frame(ord.pcoa.bray_its$vectors)
pcoa_df$merge <- rownames(pcoa_df)
pcoa_df_factors <- merge(pcoa_df, samdf_its, by = "merge")

PC1_hs <- lm(Axis.1 ~ treatment, data = pcoa_df_factors)
summary(PC1_hs)

ord.nmds.bray_its <- ordinate(ps.prop_its, method="PCoA", distance="bray")
plot_ordination(ps.prop_its, ord.pcoa.bray_its, color="site")

plot_ordination(ps.prop_its, ord.pcoa.bray_its, color= "site", shape="treatment") +
  geom_point(size=3) +
  scale_color_manual (values = wes_palette("Darjeeling2", n = 12, type = "continuous")) +
  theme(legend.title=element_blank()) +
  xlab("PC1 (50.7%)") + ylab("PC2 (23%)") +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
colnames(ps.prop_its@sam_data) ## this will tell you what factors you can use for color, shape, etc.
## coloring isn't working because you don't have "site" as a column in your sample data
##corrected:
plot_ordination(ps.prop_its, ord.pcoa.bray_its, color= "Production.Stage", shape="treatment") +
  geom_point(size=3) +
  scale_color_manual (values = wes_palette("Darjeeling2", n = 12, type = "continuous")) +
  theme(legend.title=element_blank()) +
  xlab("PC1 (50.7%)") + ylab("PC2 (23%)") +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())




# Here is the code for the distance matrix with DEseq:
# View(seqtab.nochim)
seqmat_trans <- t(seqtab.nochim) ## your data should have samples in columns and taxa in rows
deseq_counts <- DESeqDataSetFromMatrix(seqmat_trans, colData = samdf_its, design = ~ treatment)
## colData should be your metadata object and design is where you choose the factors for the differential abundance
deseq_counts <- estimateSizeFactors(deseq_counts, type = "poscounts")
deseq_counts_vst <- varianceStabilizingTransformation(deseq_counts)
vst_trans_count_tab <- assay(deseq_counts_vst)
euc_dist <- dist(t(vst_trans_count_tab))


###DENDROGRAM###
euc_clust <- hclust(euc_dist, method="ward.D2")
plot(euc_clust)

View(euc_dist)

library(dendextend)


sample_info_tab <- samdf_its
euc_dend <- as.dendrogram(euc_clust, hang=0.1)
dend_cols <- as.character(sample_info_tab$color[order.dendrogram(euc_dend)])
labels_colors(euc_dend) <- dend_cols

sample_info_tab <- samdf_its
euc_dend <- as.dendrogram(euc_clust, hang=-1, cex=0.6, xlab = "Height",
     nodePar = nodePar, horiz = TRUE)
dend_cols <- as.character(sample_info_tab$color[order.dendrogram(euc_dend)])
labels_colors(euc_dend) <- dend_cols

vst_count_phy <- otu_table(vst_trans_count_tab, taxa_are_rows=T)
sample_info_tab_phy <- sample_data(sample_info_tab)
vst_physeq <- phyloseq(vst_count_phy, sample_info_tab_phy)

sample_names()

# generating and visualizing the PCoA with phyloseq
vst_pcoa <- ordinate(vst_physeq, method="MDS", distance="euclidean")
eigen_vals <- vst_pcoa$values$Eigenvalues

# allows us to scale the axes according to their magnitude of separating apart the samples
# View(sample_info_tab)
plot_ordination(vst_physeq, vst_pcoa, color="stage", shape = "treatment") +
  geom_point(size=1) + 
  labs(col="stage") + ## this isn't adding anything?
  geom_label_repel(aes(label=sample_info_tab$merge)) +
  coord_fixed(sqrt(eigen_vals[2]/eigen_vals[1])) + 
  ggtitle("PCoA") +
  # scale_color_manual(values=unique(sample_info_tab$color[order(sample_info_tab$stage)])) + ## i don't know what this is supposed to do, but there is no color column in the dataframe - i didn't see the code where you made that object, so i made it from your metadata file samdf_its
  theme(legend.position="none")

## new pcoa with elipses but based on your last 
plot_ordination(vst_physeq, vst_pcoa, color="stage", shape = "treatment") +
  geom_point(size=1) + 
  stat_ellipse() + 
  theme_bw() +
  coord_fixed(sqrt(eigen_vals[2]/eigen_vals[1])) + 
  ggtitle("PCoA") 



####USE THIS CODE#####


## adonis test with vegan
ps_clean <- prune_taxa(!(taxa_names(ps_its) %in% "-1"), ps_its)
ps_clean <- prune_taxa(taxa_sums(ps_clean) > 0.0, ps_clean)
ps_clean <- transform_sample_counts(ps_clean, function(x) x/sum(x))
ps_clean <- prune_samples(sample_sums(ps_clean) >= 0, ps_clean)
df <- data.frame(sample_data(ps_clean))
ps_clean_bray <- phyloseq::distance(ps_clean, method = "bray")
adonis2(ps_clean_bray ~ treatment, data = df)
adonis2(ps_clean_bray ~ stage, data = df)
ps_clean_euc <- phyloseq::distance(ps_clean, method = "euclidean")
adonis2(ps_clean_euc ~ treatment, data = df)
adonis2(ps_clean_euc ~ stage, data = df)

## pcoa using your counts and including adonis p-values 
ps_prop <- transform_sample_counts(ps_its, function(otu) otu/sum(otu))
ps_prop <- prune_samples(sample_sums(ps_prop) >= 0, ps_prop)
pcoa_euc <- ordinate(ps_prop, method="PCoA", distance="euclidean")
pcoa_bray <- ordinate(ps_prop, method="PCoA", distance="bray")
# pcoa_uni <- ordinate(ps_prop, method="PCoA", distance="unifrac") ## requires a tree
# View(pcoa_bray$values)
plot_ordination(ps_prop, pcoa_bray, color="Production.Stage", shape = "treatment", title="Bray PCoA (adonis: treatment p-value=0.06; stage p-value=0.001)") +
  theme_bw() + 
  stat_ellipse() + 
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
  scale_color_manual(values = wes_palette("FantasticFox1", n = 3, type = "continuous")) +
  geom_hline(yintercept = 0, color = "lightgrey") +
  geom_vline(xintercept = 0, color = "lightgrey")
  
  
plot_ordination(ps_prop, pcoa_euc, color="treatment", shape = "treatment", title="Euclidean PCoA (adonis: treatment p-value=0.049)") +
  theme_bw() + geom_point(size=3) +
  stat_ellipse() +  xlab("PC1 (64%)") + ylab("PC2 (18.4%)") +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
  scale_color_manual(values = wes_palette("FantasticFox1", n = 3, type = "continuous")) +
  geom_hline(yintercept = 0, color = "lightgrey") +
  geom_vline(xintercept = 0, color = "lightgrey")
  
  
  
  plot_ordination(ps_prop, pcoa_euc, color="stage", shape = "treatment", title="Euclidean PCoA (adonis: treatment p-value=0.049; stage p-value=0.006)") +
  theme_bw() + 
  stat_ellipse() + 
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
  scale_color_manual(values = wes_palette("FantasticFox1", n = 3, type = "continuous")) +
  geom_hline(yintercept = 0, color = "lightgrey") +
  geom_vline(xintercept = 0, color = "lightgrey")
  
  
  plot_ordination(ps.prop_its, ord.pcoa.bray_its, color= "Production.Stage", shape="treatment") +
  geom_point(size=3) +
  scale_color_manual (values = wes_palette("Darjeeling2", n = 12, type = "continuous")) +
  theme(legend.title=element_blank()) +
  xlab("PC1 (50.7%)") + ylab("PC2 (23%)") +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
  

## text is from an adonis test and the pc % from the ordination object (left in case you wanted to add)
## you can add any other ggplot lines that you want


###MORE ORDINATION PLOTS###
{r nmds, fig.height=4, fig.width=5}

ps_prop <- transform_sample_counts(ps_its, function(otu) otu/sum(otu))
ps_prop <- prune_samples(sample_sums(ps_prop) >= 0, ps_prop)
pcoa_euc <- ordinate(ps_prop, method="PCoA", distance="euclidean")
pcoa_bray <- ordinate(ps_prop, method="PCoA", distance="bray")
nmds_euc <- ordinate(ps_prop, method="NMDS", distance="euclidean")
nmds_bray <- ordinate(ps_prop, method="NMDS", distance="bray")

pb <- plot_ordination(ps_prop, pcoa_bray, color="Production.Stage", shape = "treatment", title="Bray PCoA") +
  theme_bw() + 
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
  scale_color_manual(values = wes_palette("FantasticFox1", n = 12, type = "continuous")) +
  geom_hline(yintercept = 0, color = "lightgrey") +
  geom_vline(xintercept = 0, color = "lightgrey")

pe <- plot_ordination(ps_prop, pcoa_euc, color="treatment", shape = "treatment", title="Euclidean PCoA") +
  theme_bw() + 
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
  scale_color_manual(values = wes_palette("FantasticFox1", n = 12, type = "continuous")) +
  geom_hline(yintercept = 0, color = "lightgrey") +
  geom_vline(xintercept = 0, color = "lightgrey")
  
plot_ordination(ps_prop, pcoa_euc, color="Production.Stage", shape = "treatment", title="Euclidean PCoA") + geom_point(size=3) + 
  theme_bw() + 
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
  scale_color_manual(values = wes_palette("Darjeeling2", n = 12, type = "continuous")) +
  theme(legend.title=element_blank()) +
  xlab("PC1 (50.7%)") + ylab("PC2 (23%)") +
  geom_hline(yintercept = 0, color = "lightgrey") +
  geom_vline(xintercept = 0, color = "lightgrey")
  

###PCoA Bray###
newSTorder =  c("Sowing surface", "Seedling surface", "Transplant surface", "Mature surface", "Liner surface", "Harvest surface", "Post-sanitation surface", "Municipal water", "Nutrient solution", "Seedling root", "Transplant root", "Mature root")

newSTorder2 =  c("Surface", "Solution", "Root")

p$data$treatment <- as.character(p$data$treatment)
p$data$treatment <- factor(p$data$treatment, levels=newSTorder2)

p$data$Production.Stage <- as.character(p$data$Production.Stage)
p$data$Production.Stage <- factor(p$data$Production.Stage, levels=newSTorder)

p      


nmds_euc
p<- plot_ordination(ps.prop, nmds_euc, color= "Production.Stage", shape="treatment") + theme_bw()+
  geom_point(size=5) +
  scale_color_manual (values = my.colors4) +
  theme(legend.title=element_blank()) +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())


p<- plot_ordination(ps.prop, pcoa_bray, color= "Production.Stage", shape="treatment") + theme_bw()+
  geom_point(size=5) +
  scale_color_manual (values = my.colors12) +
  theme(legend.title=element_blank()) +
  xlab("PC1 (50.9%)") + ylab("PC2 (23%)") +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
  
p<- plot_ordination(ps.prop, pcoa_euc, color= "Production.Stage", shape="treatment") + theme_bw()+
  geom_point(size=5) +
  scale_color_manual (values = my.colors12) +
  theme(legend.title=element_blank()) +
  xlab("PC1 (64%)") + ylab("PC2 (18.4%)") +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
  
  

nb <- plot_ordination(ps_prop, nmds_bray, color="Production.Stage", shape = "treatment", title="Bray NMDS") +
  theme_bw() + 
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
  scale_color_manual(values = my.colors4) +
  geom_hline(yintercept = 0, color = "lightgrey") +
  geom_vline(xintercept = 0, color = "lightgrey")
  

ne <- plot_ordination(ps_prop, nmds_euc, color="treatment", shape = "treatment", title="Euclidean NMDS") +
  theme_bw() + 
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
  scale_color_manual(values = wes_palette("FantasticFox1", n = 3, type = "continuous")) +
  geom_hline(yintercept = 0, color = "lightgrey") +
  geom_vline(xintercept = 0, color = "lightgrey")


cowplot::plot_grid(pb, nb, pe, ne)

###Change ordination plots, without ellipse####

pb <- plot_ordination(ps_prop, pcoa_bray, color="Production.Stage", shape = "treatment", title="Bray PCoA") + geom_point(size=3) +
  theme_bw() + 
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
  scale_color_manual(values = wes_palette("Darjeeling2", n = 12, type = "continuous")) +   theme(legend.title=element_blank()) + xlab("PC1 (50.7%)") + ylab("PC2 (23%)") +
  geom_hline(yintercept = 0, color = "lightgrey") +
  geom_vline(xintercept = 0, color = "lightgrey")
  

pe <- plot_ordination(ps_prop, pcoa_euc, color="Production.Stage", shape = "treatment", title="Euclidean PCoA") + geom_point(size=3) +
  theme_bw() + 
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
  scale_color_manual(values = wes_palette("Darjeeling2", n = 12, type = "continuous")) +  theme(legend.title=element_blank()) +   xlab("PC1 (64%)") + ylab("PC2 (18.4%)") +
  geom_hline(yintercept = 0, color = "lightgrey") +
  geom_vline(xintercept = 0, color = "lightgrey")


nb <- plot_ordination(ps_prop, nmds_bray, color="Production.Stage", shape = "treatment", title="Bray NMDS") + geom_point(size=3) +
  theme_bw() + 
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
  scale_color_manual(values = wes_palette("Darjeeling2", n = 12, type = "continuous")) +  theme(legend.title=element_blank()) +
  geom_hline(yintercept = 0, color = "lightgrey") +
  geom_vline(xintercept = 0, color = "lightgrey")
  

ne <- plot_ordination(ps_prop, nmds_euc, color="Production.Stage", shape = "treatment", title="Euclidean NMDS") + geom_point(size=3) +
  theme_bw() + 
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
  scale_color_manual(values = wes_palette("Darjeeling2", n = 12, type = "continuous")) +  theme(legend.title=element_blank()) +
  geom_hline(yintercept = 0, color = "lightgrey") +
  geom_vline(xintercept = 0, color = "lightgrey")


cowplot::plot_grid(pb, nb, pe, ne)

###Ordination plots individually###

newSTorder =  c("Sowing surface", "Seedling surface", "Transplant surface", "Mature surface", "Liner surface", "Harvest surface", "Post-sanitation surface", "Municipal water", "Nutrient solution", "Seedling root", "Transplant root", "Mature root")

newSTorder2 =  c("Surface", "Solution", "Root")

p$data$treatment <- as.character(p$data$treatment)
p$data$treatment <- factor(p$data$treatment, levels=newSTorder2)

p$data$Production.Stage <- as.character(p$data$Production.Stage)
p$data$Production.Stage <- factor(p$data$Production.Stage, levels=newSTorder)

p  

##title="Bray PCoA"

p<- plot_ordination(ps_prop, pcoa_bray, color="Production.Stage", shape = "treatment") + geom_point(size=5) + theme_bw() + 
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
  scale_color_manual(values = my.colors4) +   theme(legend.title=element_blank()) + xlab("PC1 (50.7%)") + ylab("PC2 (23%)") 
  
  
  
  
####title="Euclidean PCoA")###

plot_ordination(ps_prop, pcoa_euc, color="Production.Stage", shape = "treatment") + geom_point(size=5) + 
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
  scale_color_manual(values = wes_palette("Darjeeling2", n = 12, type = "continuous")) +
  theme(legend.title=element_blank()) +
  xlab("PC1 (64%)") + ylab("PC2 (18.4%)") 
 
 
 ###title="Euclidean NMDS"###

plot_ordination(ps_prop, nmds_euc, color="Production.Stage", shape = "treatment") + geom_point(size=5) +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
  scale_color_manual(values = wes_palette("Darjeeling2", n = 12, type = "continuous")) +  theme(legend.title=element_blank()) 



```

```{r build tree}
Sys.time()

## need a phylogeny for some analyses
library(phangorn)
library(DECIPHER)
library(dada2)

seqs <- getSequences(seqtab.nochim_its)
names(seqs) <- seqs # This propagates to the tip labels of the tree
alignment <- AlignSeqs(DNAStringSet(seqs), anchor=NA)

phang.align <- phyDat(as(alignment, "matrix"), type="DNA")
dm <- dist.ml(phang.align)
treeNJ <- NJ(dm) # Note, tip order != sequence order
fit = pml(treeNJ, data=phang.align)

## negative edges length changed to 0!

fitGTR <- update(fit, k=4, inv=0.2)
fitGTR <- optim.pml(fitGTR, model="GTR", optInv=TRUE, optGamma=TRUE,
                      rearrangement = "stochastic", control = pml.control(trace = 0))
detach("package:phangorn", unload=TRUE)

## if you skip tree building, you can add it to your ps object later using merge_phyloseq()
ps_prop2 <- merge_phyloseq(ps_prop, fitGTR$tree)
ps_prop2@phy_tree
```

```{r nmds, fig.height=8, fig.width=5}
pcoa_uni <- ordinate(ps_prop2, method="PCoA", distance="unifrac")
pcoa_wuni <- ordinate(ps_prop2, method="PCoA", distance="wunifrac")
nmds_uni <- ordinate(ps_prop2, method="NMDS", distance="unifrac")
nmds_wuni <- ordinate(ps_prop2, method="NMDS", distance="wunifrac")

pu <- plot_ordination(ps_prop, pcoa_uni, color="treatment", shape = "treatment", title="Unifrac PCoA") + geom_point(size=3) +
  theme_bw() + 
  stat_ellipse() + 
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
  scale_color_manual(values = wes_palette("FantasticFox1", n = 3, type = "continuous")) +  
  geom_hline(yintercept = 0, color = "lightgrey") +
  geom_vline(xintercept = 0, color = "lightgrey")
  
  # xlab("PC1 (30.5%)") + ylab("PC2 (17.6%)") 

pw <- plot_ordination(ps_prop, pcoa_wuni, color="treatment", shape = "treatment", title="Weighted Unifrac PCoA") + geom_point(size=3) +
  theme_bw() + 
  stat_ellipse() + 
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
  scale_color_manual(values = wes_palette("FantasticFox1", n = 3, type = "continuous")) + xlab("PC1 (60.9%)") + ylab("PC2 (13.2%)") + 
  geom_hline(yintercept = 0, color = "lightgrey") +
  geom_vline(xintercept = 0, color = "lightgrey")

nu <- plot_ordination(ps_prop, nmds_uni, color="treatment", shape = "treatment", title="Unifrac NMDS") + geom_point(size=3) +
  theme_bw() + 
  stat_ellipse() + 
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
  scale_color_manual(values = wes_palette("FantasticFox1", n = 3, type = "continuous")) +
  geom_hline(yintercept = 0, color = "lightgrey") +
  geom_vline(xintercept = 0, color = "lightgrey")

nw <- plot_ordination(ps_prop, nmds_wuni, color="treatment", shape = "treatment", title="Weighted Unifrac NMDS") + geom_point(size=3) +
  theme_bw() + 
  stat_ellipse() + 
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
  scale_color_manual(values = wes_palette("FantasticFox1", n = 3, type = "continuous")) +
  geom_hline(yintercept = 0, color = "lightgrey") +
  geom_vline(xintercept = 0, color = "lightgrey")

cowplot::plot_grid(pb, nb, pe, ne, pu, nu, pw, nw, ncol = 2)

cowplot::plot_grid(pu, nu, pw, nw, ncol = 2)



##Ordination_Unifrac_by production stage with no ellipse##

pu <- plot_ordination(ps_prop, pcoa_uni, color="Production.Stage", shape = "treatment", title="Unifrac PCoA") + geom_point(size=3) +
  theme_bw() + 
  theme(legend.title=element_blank()) +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
  scale_color_manual(values = wes_palette("Darjeeling2", n = 12, type = "continuous")) + xlab("PC1 (30.5%)") + ylab("PC2 (17.6%)") +   
  geom_hline(yintercept = 0, color = "lightgrey") +
  geom_vline(xintercept = 0, color = "lightgrey")

pw <- plot_ordination(ps_prop, pcoa_wuni, color="Production.Stage", shape = "treatment", title="Weighted Unifrac PCoA") + geom_point(size=3) +
  theme_bw() + theme(legend.title=element_blank()) +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
  scale_color_manual(values = wes_palette("Darjeeling2", n = 12, type = "continuous")) + xlab("PC1 (60.9%)") + ylab("PC2 (13.2%)") + 
  geom_hline(yintercept = 0, color = "lightgrey") +
  geom_vline(xintercept = 0, color = "lightgrey")

nu <- plot_ordination(ps_prop, nmds_uni, color="Production.Stage", shape = "treatment", title="Unifrac NMDS") + geom_point(size=3) +
  theme_bw() + theme(legend.title=element_blank()) +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
  scale_color_manual(values = wes_palette("Darjeeling2", n = 12, type = "continuous")) +
  geom_hline(yintercept = 0, color = "lightgrey") +
  geom_vline(xintercept = 0, color = "lightgrey")

nw <- plot_ordination(ps_prop, nmds_wuni, color="Production.Stage", shape = "treatment", title="Weighted Unifrac NMDS") + geom_point(size=3) +
  theme_bw() + theme(legend.title=element_blank()) +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
  scale_color_manual(values = wes_palette("Darjeeling2", n = 12, type = "continuous")) +
  geom_hline(yintercept = 0, color = "lightgrey") +
  geom_vline(xintercept = 0, color = "lightgrey")

cowplot::plot_grid(pu, nu, pw, nw, ncol = 2)

##Ordination_Unifrac_by production stage individually##


##title="Unifrac PCoA"##

plot_ordination(ps_prop, pcoa_uni, color="Production.Stage", shape = "treatment") + geom_point(size=5) + theme_bw()+
  theme(legend.title=element_blank()) +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
  scale_color_manual(values = my.colors12) + xlab("PC1 (30.5%)") + ylab("PC2 (17.6%)") 
  
###title="Weighted Unifrac PCoA"###

plot_ordination(ps_prop, pcoa_wuni, color="Production.Stage", shape = "treatment") + geom_point(size=5) + theme(legend.title=element_blank()) +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
  scale_color_manual(values = wes_palette("Darjeeling2", n = 12, type = "continuous")) + xlab("PC1 (60.9%)") + ylab("PC2 (13.2%)") 

#####Oomycete: tree these codes#####
newSTorder =  c("Sowing surface", "Seedling surface", "Transplant surface", "Mature surface", "Liner surface", "Harvest surface", "Post-sanitation surface", "Municipal water", "Nutrient solution", "Seedling root", "Transplant root", "Mature root")

newSTorder2 =  c("Surface", "Solution", "Root")

p$data$treatment <- as.character(p$data$treatment)
p$data$treatment <- factor(p$data$treatment, levels=newSTorder2)

p$data$Production.Stage <- as.character(p$data$Production.Stage)
p$data$Production.Stage <- factor(p$data$Production.Stage, levels=newSTorder)

p  


###PCoA Unifrac###
p<- plot_ordination(ps_prop, pcoa_uni, color="Production.Stage", shape = "treatment") + geom_point(size=5) + theme_bw()+
  theme(legend.title=element_blank()) +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
  scale_color_manual(values = my.colors12) + xlab("PC1 (27.1%)") + ylab("PC2 (18%)") 


###title="Unifrac NMDS"###

plot_ordination(ps_prop, nmds_uni, color="Production.Stage", shape = "treatment") + geom_point(size=5) + theme(legend.title=element_blank()) +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
  scale_color_manual(values = my.colors4) + theme_bw()
  
  
p<- plot_ordination(ps.prop, nmds_uni, color= "Production.Stage", shape="treatment") + theme_bw()+
  geom_point(size=5) +
  scale_color_manual (values = my.colors12) +
  theme(legend.title=element_blank()) +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
  
  
  
###title="Weighted Unifrac NMDS"###

plot_ordination(ps_prop, nmds_wuni, color="Production.Stage", shape = "treatment") + geom_point(size=5) + theme(legend.title=element_blank()) +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
  scale_color_manual(values = wes_palette("Darjeeling2", n = 12, type = "continuous"))

##END OF ORDINATION PLOTS##



# make deseq2 object; transform table; calculate euclidian distance
deseq_counts <- DESeqDataSetFromMatrix(ASV_maple, colData = metadata_coldata, design = ~site) 

deseq_counts <- estimateSizeFactors(deseq_counts, type = "poscounts")
deseq_counts_vst <- varianceStabilizingTransformation(deseq_counts)
vst_trans_count_tab <- assay(deseq_counts_vst)
euc_dist <- dist(t(vst_trans_count_tab))

euc_clust <- hclust(euc_dist, method="ward.D2")
plot(euc_clust) 

euc_dend <- as.dendrogram(euc_clust, hang=0.1)
dend_cols <- as.character(sample_info_tab$color[order.dendrogram(euc_dend)])
labels_colors(euc_dend) <- dend_cols

plot(euc_dend, ylab="VST Euc. dist.")
legend("topright", 
       legend = c("Astrotech Heatshock", "Astrotech No Heatshock", "Lockheed Heatshock", "Lockheed No Heatshock", "Control"),
       col=c("red", "blue", "red4", "blue4", "grey"), lty = 1, lwd = 5, cex = 0.8)

# making our phyloseq object with transformed table
vst_count_phy <- otu_table(vst_trans_count_tab, taxa_are_rows=T)
sample_info_tab_phy <- sample_data(sample_info_tab)
vst_physeq <- phyloseq(vst_count_phy, sample_info_tab_phy)

# generating and visualizing the PCoA with phyloseq
vst_pcoa <- ordinate(vst_physeq, method="MDS", distance="euclidean")
eigen_vals <- vst_pcoa$values$Eigenvalues 
# allows us to scale the axes according to their magnitude of separating apart the sample


plot_ordination(vst_physeq, vst_pcoa, color="site") + 
  geom_point(size=1) + labs(col="Crop stage") + 
  geom_label_repel(aes(label=sample_info_tab$Sample)) +
  coord_fixed(sqrt(eigen_vals[2]/eigen_vals[1])) + ggtitle("PCoA") + 
  scale_color_manual(values=unique(sample_info_tab$color[order(sample_info_tab$Heatshock)])) + 
  theme(legend.position="none")



#Ordination
ps.prop <- transform_sample_counts(ps_its, function(otu) otu/sum(otu))
ord.nmds.bray <- ordinate(ps.prop, method="NMDS", distance="bray")

ps_its <- phyloseq(otu_table(seqtab.nochim, taxa_are_rows = FALSE), tax_table(taxa), samples_its)

plot_ordination(ps.prop, ord.nmds.bray, color = "treatment", title = "Bray NMDS") + geom_point(size = 4)+ theme(panel.background = element_blank(), legend.background = element_blank())


#Ordination

ps.prop <- transform_sample_counts(ps_its, function(otu) otu/sum(otu))
ord.nmds.bray <- ordinate(ps.prop, method="NMDS", distance="bray")

###Bray NMDS plot###

ps_its <- phyloseq(otu_table(seqtab.nochim, taxa_are_rows = FALSE), tax_table(taxa), samples_its)

plot_ordination(ps.prop, ord.nmds.bray, color = "Production.Stage", shape= "treatment", title = "Bray NMDS") + geom_point(size = 5)+ scale_color_manual (values = wes_palette("Darjeeling2", n = 12, type = "continuous")) +
  theme(legend.title=element_blank()) +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) 



#Load the data
ps.prop <- read.table("ps.prop", header = TRUE)

#Create subsets for the NMDS command
data_1 <- Exp245[,3:7039]
data_2 <- Exp245[,1:2]

#Load vegan
library(vegan)

#Run the actual NMDS analysis
NMDS <- metaMDS(data_1, distance = "bray", k = 2)

  
  
##NMDS new plot##
  
  ggplot(ps.prop, ord.nmds.bray, color = "site", shape= "treatment", title = "Bray NMDS") + 
    geom_point(size = 4) + 
    theme(axis.text.y = element_text(color = "black", size = 12, face = "bold"), 
    axis.text.x = element_text(colour = "black", face = "bold", size = 12), 
    legend.text = element_text(size = 12, face ="bold", color ="black"), 
    legend.position = "right", axis.title.y = element_text(face = "bold", size = 14), 
    axis.title.x = element_text(face = "bold", size = 14, color = "black"), 
    legend.title = element_text(size = 14, colour = "black", face = "bold"), 
    panel.background = element_blank(), panel.border = element_rect(color = "black", fill = NA, size = 1.2),
    legend.key=element_blank()) + 
    labs(x = "NMDS1", color = "site", y = "NMDS2", shape = "treatment")  + 
    scale_color_manual(values = c("#009E73", "#E69F00")) 
    
    

# **Transform data to proportions as appropriate for Bray-Curtis distances
ps.prop_its <- transform_sample_counts(ps_its, function(otu) otu/sum(otu))
ord.nmds.bray_its <- ordinate(ps.prop_its, method="NMDS", distance="bray")
ord.pcoa.bray_its <- ordinate(ps.prop_its, method="PCoA", distance="bray")

pcoa_df <- as.data.frame(ord.pcoa.bray_its$vectors)
pcoa_df$merge <- rownames(pcoa_df)
pcoa_df_factors <- merge(pcoa_df, samdf_its, by = "merge")

PC1_hs <- lm(Axis.1 ~ treatment, data = pcoa_df_factors)
summary(PC1_hs)

ord.nmds.bray_its <- ordinate(ps.prop_its, method="PCoA", distance="bray")
plot_ordination(ps.prop_its, ord.pcoa.bray_its, color="site")


plot_ordination(ps.prop_its, ord.pcoa.bray_its, color= "site", shape="treatment") +
  geom_point(size=3) + 
scale_color_manual (values = wes_palette("Darjeeling2", n = 12, type = "continuous")) +
  theme(legend.title=element_blank()) +
  xlab("PC1 (50.7%)") + ylab("PC2 (23%)") +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
  
  dist <- distance(ps_its, "euclidean")
ordinate(dist, "pcoa") + theme() + stat_ellipse()
  
  
  
##annotate("text", x = 0.25, y = 0.5, label = "F-statistic: 0.099; p-value: 0.755", colour = "darkgrey")##
##ggsave("plots/bacteria_pcoa_heatshock.tiff", dpi = 400)##
##Format legend##
##theme(legend.position = c(0.85, 0.87), legend.background=element_blank())##

if (!requireNamespace("BiocManager", quietly = TRUE))
  install.packages("BiocManager")

BiocManager::install("DESeq2")

library (DESeq2)

##Beta diversity##

###make deseq2 object; transform table; calculate euclidian distance###
deseq_counts <- DESeqDataSetFromMatrix(seqtab.nochim, colData = treatment, design = ~site) 
deseq_counts <- estimateSizeFactors(deseq_counts, type = "poscounts")
deseq_counts_vst <- varianceStabilizingTransformation(deseq_counts)
vst_trans_count_tab <- assay(deseq_counts_vst)
euc_dist <- dist(t(vst_trans_count_tab))

euc_clust <- hclust(euc_dist, method="ward.D2")
plot(euc_clust)

euc_dend <- as.dendrogram(euc_clust, hang=0.1)
dend_cols <- as.character(sample_info_tab$color[order.dendrogram(euc_dend)])
labels_colors(euc_dend) <- dend_cols

plot(euc_dend, ylab="VST Euc. dist.")
legend("topright", 
       legend = c("Astrotech Heatshock", "Astrotech No Heatshock", "Lockheed Heatshock", "Lockheed No Heatshock", "Control"),
       col=c("red", "blue", "red4", "blue4", "grey"), lty = 1, lwd = 5, cex = 0.8)\
       

# making our phyloseq object with transformed table
vst_count_phy <- otu_table(vst_trans_count_tab, taxa_are_rows=T)
sample_info_tab_phy <- sample_data(sample_info_tab)
vst_physeq <- phyloseq(vst_count_phy, sample_info_tab_phy)

# generating and visualizing the PCoA with phyloseq
vst_pcoa <- ordinate(vst_physeq, method="MDS", distance="euclidean")
eigen_vals <- vst_pcoa$values$Eigenvalues 

# allows us to scale the axes according to their magnitude of separating apart the samples

plot_ordination(vst_physeq, vst_pcoa, color="site") + 
  geom_point(size=1) + labs(col="site") + 
  geom_label_repel(aes(label=sample_info_tab$Sample)) +
  coord_fixed(sqrt(eigen_vals[2]/eigen_vals[1])) + ggtitle("PCoA") + 
  scale_color_manual(values=unique(sample_info_tab$color[order(sample_info_tab$site)])) + 
  theme(legend.position="none")



##HeatMap##
##Top18 Genus##
melted_its$Genus <- gsub('g__', '', melted_its$Genus)
genus_counts <- aggregate(melted_its$Abundance, by=list(Category=melted_its$Genus), FUN=sum)
gc_reorder <- genus_counts[order(-genus_counts$x),]
top18_genus <- NULL
top18_genus$Genus <- head(gc_reorder$Category, 18)
top18_melted <- subset(melted_its, Genus %in% top18_genus$Genus)

melted_its <- psmelt(ps_its)

mine.heatmap <- ggplot(data = top18_melted, mapping = aes(x = treatment,
                                                       y = Genus,
                                                       fill = Abundance)) +
  geom_tile() +
  xlab(label = "treatment")
mine.heatmap

##Heatmap_retry##

mine.heatmap <- ggplot(data=ps_its, mapping = aes(x = Production.Stage,
                                                         y = ASV,
                                                         fill = Abundance)) +
  geom_tile() +
  xlab(label = "Production.Stage")
mine.heatmap

###Large phylogenetic tree####

library(metacoder)

print(ps_its)


itsx <- parse_phyloseq(top18_melted)
heat_tree(itsx, node_size = n_obs, node_color = n_obs, node_label = taxon_names, title = "Oomycete", margin_size = c(0.1, 0.1, 0.1, 0.1), title_size = 0.04, node_label_size = 0.5,
          output_file = "ITS_tree_13.pdf")
          
          itsx <- parse_phyloseq(top18_melted)
heat_tree(itsx, node_size = n_obs, node_color = n_obs, node_label = taxon_names, title = "Oomycete", margin_size = c(0.1, 0.1, 0.1, 0.1), title_size = 0.04, node_label_size = 0.5,
          output_file = "ITS_tree_13.pdf")

itsx <- parse_phyloseq(top18_melted)
heat_tree(itsx, node_size = n_obs, node_color = n_obs, title = "Oomycete", margin_size = c(0.1, 0.1, 0.1, 0.1), title_size = 0.04, node_label_size = 0.5,
          output_file = "ITS_tree_14.pdf")
     
itsx <- parse_phyloseq(top18_melted)

heat_tree_matrix (itsx, node_size = n_obs, node_color = n_obs, title = "Oomycete", margin_size = c(0.1, 0.1, 0.1, 0.1), title_size = 0.04, node_label_size = 0.5,
          output_file = "ITS_tree_15.pdf")
        
itsx <- parse_phyloseq(ps_its)
heat_tree(itsx, node_size = n_obs, node_color = n_obs, node_label = taxon_names, title = "Oomycete", title_size = 0.04, node_label_size = 0.1, 
          output_file = "ITS_tree_2.pdf")


melted_its$Genus <- gsub('g__', ''), gsub ('p__', ''), gsub ('s__', ''), gsub (f__', ''), gsub ('o__', ''), gsub ('c__', ''), gsub ('k__', ''), Genus !="Lactuca", melted_its$Genus)
genus_counts <- aggregate(melted_its$Abundance, by=list(Category=melted_its$Genus), FUN=sum)
gc_reorder <- genus_counts[order(-genus_counts$x),]
top18_genus <- NULL
top18_genus$Genus <- head(gc_reorder$Category, 18)
top18_melted <- subset(melted_its, Genus %in% top18_genus$Genus)


(subset(top18_melted, Genus != "Lactuca"), aes(x = Production.Stage, y = Abundance, fill = Genus), subset = !(Genus == 'NA'))

Genus != "Lactuca"


###export OTU table###
ASV = as(otu_table(ps_its), "matrix")
# transpose if necessary
if(taxa_are_rows(ps_its)){ASV <- t(ASV)}
# Coerce to data.frame
ASVdf = as.data.frame(ASV)
write.csv(ASVdf, file='ASV_maple_its.csv')

glom <- tax_glom(ps_its, taxrank = 'Species')
#create dataframe from phyloseq object
dat <- psmelt(glom)
#convert Class to a character vector from a factor
dat$Species <- as.character(dat$Species)
#aggregate
Species_abundance <- aggregate(Abundance~Sample+Species, dat, FUN=sum)
#reorganize the table so that each Class is a column
library(reshape)
Species_abundance <- cast(Species_abundance, Sample ~ Species)
#how to transpose file
Species_abundance <- t(Species_abundance)
write.csv(Species_abundance, file='Species_abundance.csv')


##install DECIPHER##
if (!requireNamespace("BiocManager", quietly = TRUE))
  install.packages("BiocManager")

BiocManager::install("DECIPHER")



###Create a phylogenetic tree####
library(doParallel); packageVersion("doParallel")
library(foreach); packageVersion("foreach")
library(DECIPHER)
library(phangorn)
library(dada2)
#Create multiple denovo alignment
seqs <- getSequences(taxa)
names(seqs) <- seqs # This propagates to the tip labels of the tree
alignment <- AlignSeqs(DNAStringSet(seqs), anchor=NA,verbose=FALSE)

#construct a neighbor-joining tree, and then fit a Generalized time-reversible with Gamma rate variation
#maximum likelihood tree using the neighbor-joining tree as a starting point.
phangAlign <- phyDat(as(alignment, "matrix"), type="DNA")
dm <- dist.ml(phangAlign)
treeNJ <- NJ(dm) # Note, tip order != sequence order
fit = pml(treeNJ, data=phangAlign)
fitGTR <- update(fit, k=4, inv=0.2)
fitGTR <- optim.pml(fitGTR,model="GTR", optInv=TRUE, optGamma=TRUE,
                    rearrangement = "stochastic", control = pml.control(trace = 0))
detach("package:phangorn", unload=TRUE)

#Don't run dplyr until you run the tree, tree builds phyloseq object, need for UniFrac)#

library(dplyr)
ps_its <- phyloseq(otu_table(seqtab.nochim_its, taxa_are_rows=FALSE), 
                     samples_its, 
                     tax_table(taxa),phy_tree(fitGTR$tree))



plot_tree(ps_its, ladderize = TRUE, label.tips = "taxa", ladderize="left")
rlang::last_error()
plot_tree(ps_its, ladderize = TRUE, color="site")


library(vegan)
metadata <- as(samples_data(ps_its), "Production.Stage")

adonis(distance(ps_its, method="bray") ~ "Production.Stage",
       data = metadata)

estimate_richness(metadata, "Shannon", "Simpson")

####p-value for PCoA graph#####
bc <- phyloseq::distance(ps_its, "bray")
adonis(bc ~ Production.Stage, data = metadata)

########


data("Production.Stage")
erich <- estimate_richness(soilrep, measures = c("Observed", "Shannon", "Simpson", "Fisher"))
ttest <- t(sapply(erich, function(x) unlist(t.test(x~sample_data(soilrep)$warmed)[c("estimate","p.value","statistic","conf.int")])))
ttest

References 
  
  Databases:
  UNITE Community (2020): UNITE general FASTA release. Version 01.12.2020. UNITE Community. https://doi.org/10.15156/BIO/587475 
